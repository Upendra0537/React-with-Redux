React and Redux
-----------------
React - Java script
Redux - contains all the packages
jsx - html like structure which are used in React

node -v to check if node.js is installed or not

npm - node package manager
npm install -g create-react-app -> this is used to create sample project 

create-react-app jsx -> to create a new project names jsx

Babel - converts any old ES2015 - ES2019  to ES5
all the ES are standards of Javascripts

JSX Project - comes with following folders 
src - for source code
public - for a images and static content
node_modules - dependencies - no changes
package.json - dependencies we add
package-lock.json - dependencies - meta data 
.gitignore  - list of things to be ignored when uploading the code to Git version control

<project directory> npm start
cntrl+c to terminate

Making change to the jsx project
index.js
-> import the React and ReactDOM libraries
import React from 'react';
//getting the code of react to React variable
-> create a react component
component is a function/class is to produce HTML(jsx) and handle events(eventhandlers)
-> Take the react component and show it on the screen

JSX vs HTML
<button style="background-color: blue"> - HTML
<button style={{backgroundColor : 'blue'}}> - JSX

<label class = "lable" for="name">Enter Name:</label> - HTML
<label className = "lable" for="name">Enter Name:</label> - JSX

<button>Click</button> - HTML
<button>{buttonText}</button> - JSX

JavaScript objects cannot be used as text
but JavaScript object can be used as an attribute 

check console for any JSX error 

React -  contains the JSX
ReactDOM - is used to display the JSX

Component Nesting
Component Resuability
Component Configuration

For Styles 
Semantic-ui.com - to get the templates of the css formatting
https://cdnjs.com/libraries/semantic-ui
css file to load 
https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css

For dummy data
faker.js - for getting the fake data
https://github.com/marak/Faker.js/

npm install --save faker - to import the faker.js module into the project
this would update the package.jason with the dependencies


Reusable Component
-------------------
Create a new .js file 
Naming standard all caps words without any spaces or "_"
should have its own import stmts

Nested Components
----------------------
Webpack helps to connect two components
stmt in the main component
import CommentDetail from "./CommentDetails"
<CommentDetail/>
stmt in the sub component
export default CommentDetail;

one component inside an another we use them as tags

Props System(Properties)
-----------------------------
So pass data from the parent component to the child component i.e. to configure the child component
Parent Component
<CommentDetail author="SAM" date="Today at 6:00PM" text="Nice blog post!!"/>
Child Component -> props is the object which contains the data from the parent
CommentDetail = (props) => {
 {props.author} // to refer to a variable 

console.log(props); - to print the data of each props in the console 

props.childern - to get details of a parent component to a child component
and we can nest the parent and child components 

defaultProps - to default the values of a Props in the child component if the parent is not passing some values


Class Components Vs Functional Components
-------------------------------------------
Functional Component - straigth logic
Class Component - easy organization, State System ( user input), Life Cycle Events(app first starts)

Functional Component

const App = () => 
	{
	    return (<div>Hi</div>);
	};

Life Cycle
->js file loads to browser
-> App Component gets created
-> Call any service
-> App returns JSX, gets rendered to page on HTML
...
...
...
<waiting for the service to get the position>
-> We get the Geolocation.

If we use functional based component we don't have a way to wait the rendering of JSX to HTML with the position. 


Class Component
class should always extend React.Component
Should call render() method to return JSX - prefer not to have conditional stmts
Example:
class App extends React.Component
	{
		render(){
			return<div>Hi</div>
		};
	{

Geolocation API 
https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API
window.geolocaiton.getCurrentPosition(Success[,error[)

State:
------
-> can by used only by class components
-> it is a JS object
-> updating State would rerender component immediately
-> State must be initialized when the component is created
-> State can only be updated using the function 'setState'
Example:
this.setState({lat: position.coords.latitude})
//We should not use the below statement
//this.state.lat = position.coords.latitude
-> we dont need to update all the properties of the state

Example:
 class Clock extends React.Component {
        state = {time: new Date().toLocaleTimeString()};
        componentDidMount() {
            setInterval(() => {
                this.setState({time: new Date().toLocaleTimeString()})   
            }, 1000)
        }
        
        render() {
            return (
                <div className="time">
                    The time is: {this.state.time}
                </div>
            );
        }
    }


    // Renders the App component into a div with id 'root'
    ReactDOM.render(<Clock />, document.querySelector('#root'));

Constructor function
-> to initialize the State Object
-> need to have a argument props
-> need to call Super(props) so that it call the constructor is hte React.Component super class
Example;
Constructor(props)
    {
        super(props);
        // this is the only time we do the direct assignment
        this.state = { lat: null }
    }

Component Lifecycle - all these methods are called by default at specific life cycle of the component
-------------------
-> Constructor() - called one time initial setup
-> Render() - just to return a JSX
-> componentDidMount() - Content visible on screen for the first time - data loading - one time call
-> componentDidUpdate() - called when ever there is an update to the component - rerender
-> componentWillUnmount() - Removing the component from the screen - cleanup of the component


